// <auto-generated />
using System;
using FollowTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FollowTask.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FollowTask.Data.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.TaskChangedLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ChangedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NewStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OldStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NewStatusId");

                    b.HasIndex("OldStatusId");

                    b.HasIndex("TaskId");

                    b.ToTable("TasksChangedLogs");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.TaskData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskDatas");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Tasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TagIds")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Comment", b =>
                {
                    b.HasOne("FollowTask.Data.Entities.Tasks", "Task")
                        .WithMany("Comment")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Task");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.TaskChangedLog", b =>
                {
                    b.HasOne("FollowTask.Data.Entities.Status", "NewStatus")
                        .WithMany("NewStatus")
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NewStatus_Status");

                    b.HasOne("FollowTask.Data.Entities.Status", "OldStatus")
                        .WithMany("OldStatus")
                        .HasForeignKey("OldStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OldStatus_Status");

                    b.HasOne("FollowTask.Data.Entities.Tasks", "Task")
                        .WithMany("TaskChangedLog")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskChangedLog_Task");

                    b.Navigation("NewStatus");

                    b.Navigation("OldStatus");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.TaskData", b =>
                {
                    b.HasOne("FollowTask.Data.Entities.Comment", "Comment")
                        .WithMany("TaskData")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskData_Comment");

                    b.HasOne("FollowTask.Data.Entities.Tasks", "Task")
                        .WithMany("TaskData")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TaskData_Task");

                    b.Navigation("Comment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Tasks", b =>
                {
                    b.HasOne("FollowTask.Data.Entities.Status", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Tasks_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Comment", b =>
                {
                    b.Navigation("TaskData");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Status", b =>
                {
                    b.Navigation("NewStatus");

                    b.Navigation("OldStatus");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("FollowTask.Data.Entities.Tasks", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("TaskChangedLog");

                    b.Navigation("TaskData");
                });
#pragma warning restore 612, 618
        }
    }
}
